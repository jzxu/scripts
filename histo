#!/bin/sh

# Print an ascii histogram

nbins=10
len=60
while [ "$#" -gt 0 ]
do
case "$1" in
-n)
	nbins=$2
	shift; shift
	;;
-l)
	len=$2
	shift; shift
	;;
*)
	input=$1
	shift 1
	;;
esac
done

exec awk -v nbins="$nbins" -v len="$len" '
function isnum(x) {
	return (x + 0 == x)
}

function isint(x) {
	return (int(x) == x)
}

function round(x) {
	if (x - int(x) < 0.5)
		return int(x)
	return int(x) + 1;
}

function min(a, b) {
	return a > b ? b : a
}

function max(a, b) {
	return a < b ? b : a
}

function abs(x) {
	return x < 0 ? -x : x
}

function error(msg) {
	print msg | "cat 1>&2"
	err = 1
	exit
}

BEGIN {
	minval=0; maxval=0; n=0; allints = 1;
	if (!isnum(nbins)) {
		error("invalid bin number")
	}
	if (!isnum(len)) {
		error("invalid length")
	}
}
{
	for (i = 1; i <= NF; ++i) {
		if (!isnum($i)) {
			printf("Warning: %s is not a number\n", $i) | "cat 1>&2"
			continue
		}
		if (allints && !isint($i)) {
			allints = 0;
		}
		if (n == 0 || $i < minval)
			minval = $i
		if (n == 0 || $i > maxval)
			maxval = $i
		v[n++] = $i
	}
}
END {
	if (err) {
		exit 1
	}
	if (n > 0) {
		if (minval == maxval) {
			nbins = 1
			bins[0] = n
			binmax[0] = maxval
			largest = n
		} else {
			nbins = min(n - 1, nbins)
			binsize = (maxval - minval) / nbins
			if (allints)
				binsize = round(binsize)
			binmax[0] = minval + binsize
			for (i = 1; i < nbins - 1; ++i) {
				# distribute integral sized bins as evenly as possible
				if (allints)
					binsize = round((maxval - binmax[i - 1]) / (nbins - i))
				
				binmax[i] = binmax[i - 1] + binsize;
			}
			binmax[nbins - 1] = maxval
			
			largest=0
			for (i = 0; i < n; ++i) {
				for (b = 0; v[i] > binmax[b]; ++b)
					;
				
				if (++bins[b] > largest) {
					largest = bins[b]
				}
			}
		}
		perhash = len / largest
		hfmt = "%9.2e"
		if (allints) {
			absmax = max(abs(minval), abs(maxval))
			if (absmax < 1e6) {
				digits = int(log(absmax) / log(10)) + 1
				hfmt = "%" digits "d"
			}
		}
		printf(hfmt "\n", minval)
		for (i = 0; i < nbins; ++i) {
			tfmt = "%d"
			if (bins[i] >= 1e3) {
				tfmt = "%.2e"
			}
			bar = sprintf("%*s" tfmt, int(bins[i] * perhash), "/", bins[i])
			gsub(" ", "=", bar)
			printf(hfmt " |%s\n", binmax[i], bar)
		}
	}
	printf ("\ncount: %d\n", n)
}' $*
