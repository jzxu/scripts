#!/bin/sh

# Selectively print space delimited fields. Similar to cut, but handles runs of
# spaces. Field selection syntax is very similar to Python list slicing syntax.
# Field numbers start at 1. For a range, if start > end, then the fields will
# be printed in reverse.
#
# Examples:
# $ echo 1 2 3 4 5 | fields 1 3 5
# 1 3 5
# $ echo 1 2 3 4 5 | fields 1:3 :2 -3:
# 1 2 3 1 2 4 5
# $ echo 1 2 3 4 5 | fields 3:1
# 3 2 1

awk -v args="$*" '
function min(a, b) { if (a < b) return a; else return b; }
function max(a, b) { if (a > b) return a; else return b; }

BEGIN {
	num_re = "(-?[0-9]+)"
	range_re = num_re "?:" num_re "?"
	nranges = split(args, a)
	for (i = 1; i <= nranges; ++i) {
		if (match(a[i], range_re)) {
			m = split(a[i], p, ":")
			s[i] = p[1]
			e[i] = p[2]
		} else if (match(a[i], "^" num_re "$")) {
			s[i] = a[i]
			e[i] = a[i]
		} else {
			printf ("syntax error %s\n", a[i]) | "cat 1>&2"
			exit 1
		}
	}
}
{
	sep1 = ""
	for (i = 1; i <= nranges; ++i) {
		printf sep1
		sep1 = " "
		if (s[i] == "") {
			start = 1
		} else if (s[i] < 0) {
			start = max(NF + s[i] + 1, 1)
		} else {
			start = min(s[i], NF)
		}
		if (e[i] == "") {
			end = NF
		} else if (e[i] < 0) {
			end = max(NF + e[i] + 1, 1)
		} else {
			end = min(e[i], NF)
		}
		sep2 = ""
		if (start == end) {
			printf $start
		} else if (start < end) {
			for (j = start; j <= end; ++j) {
				printf (sep2 $j)
				sep2 = " "
			}
		} else {
			for (j = start; j >= end; --j) {
				printf (sep2 $j)
				sep2 = " "
			}
		}
	}
	printf("\n")
}'
